{"ast":null,"code":"import Vec2 from './Vec2';\nclass RigidShape {\n  constructor(center, width = 40, height = 40, mass = 1, friction = 0.8, restitution = 0.2) {\n    this.mCenter = center;\n    this.width = width;\n    this.height = height;\n    this.mAngle = 0;\n    this.mVelocity = new Vec2(0, 0);\n    this.mAcceleration = new Vec2(0, 10); // Gravity\n\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n    this.mVertex = [];\n    this.mFaceNormal = [];\n    this.mBoundRadius = Math.sqrt(width ** 2 + height ** 2) / 2;\n\n    // Initialize vertices and face normals\n    this.updateVerticesAndNormals();\n    this.mInvMass = mass !== undefined ? 1 / mass : 0;\n    this.mFriction = friction !== undefined ? friction : 0.8;\n    this.mRestitution = restitution !== undefined ? restitution : 0.2;\n    this.updateInertia();\n  }\n  updateVerticesAndNormals() {\n    this.mVertex[0] = new Vec2(this.mCenter.x - this.width / 2, this.mCenter.y - this.height / 2);\n    this.mVertex[1] = new Vec2(this.mCenter.x + this.width / 2, this.mCenter.y - this.height / 2);\n    this.mVertex[2] = new Vec2(this.mCenter.x + this.width / 2, this.mCenter.y + this.height / 2);\n    this.mVertex[3] = new Vec2(this.mCenter.x - this.width / 2, this.mCenter.y + this.height / 2);\n    this.mFaceNormal[0] = this.mVertex[1].subtract(this.mVertex[0]).normalize(); // Top\n    this.mFaceNormal[1] = this.mVertex[2].subtract(this.mVertex[1]).normalize(); // Right\n    this.mFaceNormal[2] = this.mVertex[3].subtract(this.mVertex[2]).normalize(); // Bottom\n    this.mFaceNormal[3] = this.mVertex[0].subtract(this.mVertex[3]).normalize(); // Left\n  }\n  update() {\n    // Time step should be calculated dynamically\n    const dt = 1 / 60; // Example for 60 FPS\n\n    if (this.mInvMass !== 0) {\n      this.mVelocity = this.mVelocity.add(this.mAcceleration.scale(dt));\n      this.move(this.mVelocity.scale(dt));\n    }\n    this.mAngularVelocity += this.mAngularAcceleration * dt;\n    this.rotate(this.mAngularVelocity * dt);\n  }\n  move(vec) {\n    this.mCenter = this.mCenter.add(vec);\n    this.updateVerticesAndNormals();\n  }\n  rotate(angle) {\n    this.mAngle += angle;\n    // Update vertices and face normals if the shape is rotated\n    this.updateVerticesAndNormals();\n  }\n  boundTest(otherShape) {\n    const vFrom1to2 = otherShape.mCenter.subtract(this.mCenter);\n    const rSum = this.mBoundRadius + otherShape.mBoundRadius;\n    const dist = vFrom1to2.length();\n    return dist <= rSum;\n  }\n  updateMass(delta) {\n    let mass = this.mInvMass !== 0 ? 1 / this.mInvMass : 0;\n    mass += delta;\n    if (mass <= 0) {\n      this.mInvMass = 0;\n      this.mVelocity = new Vec2(0, 0);\n      this.mAcceleration = new Vec2(0, 0);\n      this.mAngularVelocity = 0;\n      this.mAngularAcceleration = 0;\n    } else {\n      this.mInvMass = 1 / mass;\n      this.mAcceleration = new Vec2(0, 10); // Reset gravity\n    }\n    this.updateInertia();\n  }\n  updateInertia() {\n    if (this.mInvMass === 0) {\n      this.mInertia = 0;\n    } else {\n      this.mInertia = 1 / this.mInvMass * (this.width ** 2 + this.height ** 2) / 12;\n      this.mInertia = 1 / this.mInertia;\n    }\n  }\n}\nexport default RigidShape;","map":{"version":3,"names":["Vec2","RigidShape","constructor","center","width","height","mass","friction","restitution","mCenter","mAngle","mVelocity","mAcceleration","mAngularVelocity","mAngularAcceleration","mVertex","mFaceNormal","mBoundRadius","Math","sqrt","updateVerticesAndNormals","mInvMass","undefined","mFriction","mRestitution","updateInertia","x","y","subtract","normalize","update","dt","add","scale","move","rotate","vec","angle","boundTest","otherShape","vFrom1to2","rSum","dist","length","updateMass","delta","mInertia"],"sources":["/Users/mac/Desktop/apps/physics/physics_engine/React/src/RigidShape.js"],"sourcesContent":["import Vec2 from './Vec2';\n\nclass RigidShape {\n  constructor(center, width = 40, height = 40, mass = 1, friction = 0.8, restitution = 0.2) {\n    this.mCenter = center;\n    this.width = width;\n    this.height = height;\n    this.mAngle = 0;\n    this.mVelocity = new Vec2(0, 0);\n    this.mAcceleration = new Vec2(0, 10); // Gravity\n\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n\n    this.mVertex = [];\n    this.mFaceNormal = [];\n    this.mBoundRadius = Math.sqrt(width ** 2 + height ** 2) / 2;\n\n    // Initialize vertices and face normals\n    this.updateVerticesAndNormals();\n\n    this.mInvMass = mass !== undefined ? 1 / mass : 0;\n    this.mFriction = friction !== undefined ? friction : 0.8;\n    this.mRestitution = restitution !== undefined ? restitution : 0.2;\n\n    this.updateInertia();\n  }\n\n  updateVerticesAndNormals() {\n    this.mVertex[0] = new Vec2(this.mCenter.x - this.width / 2, this.mCenter.y - this.height / 2);\n    this.mVertex[1] = new Vec2(this.mCenter.x + this.width / 2, this.mCenter.y - this.height / 2);\n    this.mVertex[2] = new Vec2(this.mCenter.x + this.width / 2, this.mCenter.y + this.height / 2);\n    this.mVertex[3] = new Vec2(this.mCenter.x - this.width / 2, this.mCenter.y + this.height / 2);\n\n    this.mFaceNormal[0] = this.mVertex[1].subtract(this.mVertex[0]).normalize(); // Top\n    this.mFaceNormal[1] = this.mVertex[2].subtract(this.mVertex[1]).normalize(); // Right\n    this.mFaceNormal[2] = this.mVertex[3].subtract(this.mVertex[2]).normalize(); // Bottom\n    this.mFaceNormal[3] = this.mVertex[0].subtract(this.mVertex[3]).normalize(); // Left\n  }\n\n  update() {\n    // Time step should be calculated dynamically\n    const dt = 1 / 60; // Example for 60 FPS\n\n    if (this.mInvMass !== 0) {\n      this.mVelocity = this.mVelocity.add(this.mAcceleration.scale(dt));\n      this.move(this.mVelocity.scale(dt));\n    }\n\n    this.mAngularVelocity += this.mAngularAcceleration * dt;\n    this.rotate(this.mAngularVelocity * dt);\n  }\n\n  move(vec) {\n    this.mCenter = this.mCenter.add(vec);\n    this.updateVerticesAndNormals();\n  }\n\n  rotate(angle) {\n    this.mAngle += angle;\n    // Update vertices and face normals if the shape is rotated\n    this.updateVerticesAndNormals();\n  }\n\n  boundTest(otherShape) {\n    const vFrom1to2 = otherShape.mCenter.subtract(this.mCenter);\n    const rSum = this.mBoundRadius + otherShape.mBoundRadius;\n    const dist = vFrom1to2.length();\n\n    return dist <= rSum;\n  }\n\n  updateMass(delta) {\n    let mass = this.mInvMass !== 0 ? 1 / this.mInvMass : 0;\n    mass += delta;\n\n    if (mass <= 0) {\n      this.mInvMass = 0;\n      this.mVelocity = new Vec2(0, 0);\n      this.mAcceleration = new Vec2(0, 0);\n      this.mAngularVelocity = 0;\n      this.mAngularAcceleration = 0;\n    } else {\n      this.mInvMass = 1 / mass;\n      this.mAcceleration = new Vec2(0, 10); // Reset gravity\n    }\n\n    this.updateInertia();\n  }\n\n  updateInertia() {\n    if (this.mInvMass === 0) {\n      this.mInertia = 0;\n    } else {\n      this.mInertia = (1 / this.mInvMass) * (this.width ** 2 + this.height ** 2) / 12;\n      this.mInertia = 1 / this.mInertia;\n    }\n  }\n}\n\nexport default RigidShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}