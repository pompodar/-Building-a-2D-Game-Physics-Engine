{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/apps/physics/physics_engine/physics-engine/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Vec2 from './Vec2';\nimport Rectangle from './Rectangle';\nimport Circle from './Circle';\nimport CollisionInfo from './CollisionInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  let mGravity = new Vec2(0, 10);\n  let mMovement = true;\n  var mPositionalCorrectionFlag = true;\n  // number of relaxation iteration\n  var mRelaxationCount = 15;\n  // percentage of separation to project objects\n  var mPosCorrectionRate = 0.8;\n  const canvasRef = useRef(null);\n  const allObjectsRef = useRef([]);\n  const gObjectNumRef = useRef(0);\n  const [mainContext, setMaincontext] = useState();\n  const updateGameObjects = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    context.clearRect(0, 0, width, height);\n    setMaincontext(context);\n    allObjectsRef.current.forEach(obj => {\n      obj.update(canvas);\n      obj.draw(context);\n    });\n    var collisionInfo = new CollisionInfo();\n\n    // Функція для малювання інформації про зіткнення\n    var drawCollisionInfo = function (collisionInfo, context) {\n      context.beginPath();\n      context.moveTo(collisionInfo.mStart.x, collisionInfo.mStart.y);\n      context.lineTo(collisionInfo.mEnd.x, collisionInfo.mEnd.y);\n      context.closePath();\n      context.strokeStyle = \"green\";\n      context.stroke();\n    };\n    var positionalCorrection = function (s1, s2, collisionInfo) {\n      var s1InvMass = s1.mInvMass;\n      var s2InvMass = s2.mInvMass;\n      var num = collisionInfo.getDepth() / (s1InvMass + s2InvMass) * mPosCorrectionRate;\n      var correctionAmount = collisionInfo.getNormal().scale(num);\n      s1.move(correctionAmount.scale(-s1InvMass));\n      s2.move(correctionAmount.scale(s2InvMass));\n    };\n    var resolveCollision = function (s1, s2, collisionInfo) {\n      if (s1.mInvMass === 0 && s2.mInvMass === 0) return;\n      // correct positions\n      if (mPositionalCorrectionFlag) positionalCorrection(s1, s2, collisionInfo);\n      var n = collisionInfo.getNormal();\n      var v1 = s1.mVelocity;\n      var v2 = s2.mVelocity;\n      var relativeVelocity = v2.subtract(v1);\n      // Relative velocity in normal direction\n      var rVelocityInNormal = relativeVelocity.dot(n);\n      // if objects moving apart ignore\n      if (rVelocityInNormal > 0) return;\n      // compute and apply response impulses for each object\n      var newRestituion = Math.min(s1.mRestitution, s2.mRestitution);\n      var newFriction = Math.min(s1.mFriction, s2.mFriction);\n      // Calc impulse scalar\n      var jN = -(1 + newRestituion) * rVelocityInNormal;\n      jN = jN / (s1.mInvMass + s2.mInvMass);\n      //impulse is in direction of normal ( from s1 to s2)\n      var impulse = n.scale(jN);\n      // impulse = F dt = m * v\n      // v = impulse / m\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n      var tangent = relativeVelocity.subtract(n.scale(relativeVelocity.dot(n)));\n      // relativeVelocity.dot(tangent) should less than 0\n      tangent = tangent.normalize().scale(-1);\n      var jT = -(1 + newRestituion) * relativeVelocity.dot(tangent) * newFriction;\n      jT = jT / (s1.mInvMass + s2.mInvMass);\n      // friction should be less than force in normal direction\n      if (jT > jN) jT = jN;\n      //impulse is from s1 to s2 (in opposite direction of velocity)\n      impulse = tangent.scale(jT);\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n    };\n    for (let k = 0; k < mRelaxationCount; k++) {\n      for (let i = 0; i < allObjectsRef.current.length; i++) {\n        for (let j = i + 1; j < allObjectsRef.current.length; j++) {\n          // if (allObjectsRef.current[i].boundTest(allObjectsRef.current[j])) {  \n\n          //   context.strokeStyle = 'green';\n          //   allObjectsRef.current[i].draw(context);\n          //   allObjectsRef.current[j].draw(context);\n          // } else {\n          //   context.strokeStyle = 'blue';\n          // }\n\n          if (allObjectsRef.current[i].boundTest(allObjectsRef.current[j])) {\n            if (allObjectsRef.current[i].collisionTest(allObjectsRef.current[j], collisionInfo)) {\n              // Перевірка та зміна напряму нормалі\n              if (collisionInfo.getNormal().dot(allObjectsRef.current[j].mCenter.subtract(allObjectsRef.current[i].mCenter)) < 0) {\n                collisionInfo.changeDir();\n              }\n\n              // Малювання інформації про зіткнення\n              drawCollisionInfo(collisionInfo, context);\n              resolveCollision(allObjectsRef.current[i], allObjectsRef.current[j], collisionInfo);\n            }\n          }\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 450;\n\n    // Initial objects setup\n    let r1 = new Rectangle(new Vec2(200, 200), 40, 40, false);\n    allObjectsRef.current = [r1];\n    const runGameLoop = () => {\n      updateGameObjects();\n      requestAnimationFrame(runGameLoop);\n    };\n    runGameLoop();\n\n    // Add new rectangles at random positions every 5 seconds\n    const intervalId = setInterval(() => {\n      const canvas = canvasRef.current;\n      const width = canvas.width;\n      const height = canvas.height;\n      const randomX = Math.random() * width;\n      const randomY = Math.random() * height;\n\n      //let r1 = new Rectangle(new Vec2(randomX, randomY), 40, 40, false);\n      //allObjectsRef.current = [...allObjectsRef.current, r1];\n    }, 500);\n    return () => {\n      clearInterval(intervalId); // Clean up the interval on component unmount\n    };\n  }, []);\n  const handleKeyDown = useCallback(event => {\n    const keycode = event.keyCode || event.which;\n    const allObjects = allObjectsRef.current;\n    const gObjectNum = gObjectNumRef.current;\n    if (keycode === 70) {\n      // F\n      let r1 = new Rectangle(new Vec2(allObjects[gObjectNum].mCenter.x + 200, allObjects[gObjectNum].mCenter.y + 20), Math.random() * 30 + 10, Math.random() * 30 + 10);\n      var r5 = new Rectangle(new Vec2(500, 200), 400, 20, 0, 0.3, 0);\n      r5.rotate(2.8);\n      var r6 = new Rectangle(new Vec2(200, 400), 400, 20, 20, 1, 0.5);\n      allObjectsRef.current = [...allObjects, r1, r5, r6];\n    }\n    if (keycode === 71) {\n      // G\n      let r1 = new Circle(new Vec2(allObjects[gObjectNum].mCenter.x, allObjects[gObjectNum].mCenter.y), Math.random() * 10 + 20);\n      allObjectsRef.current = [...allObjects, r1];\n    }\n    if (keycode >= 48 && keycode <= 57) {\n      // Number keys\n      const index = keycode - 48;\n      if (index < allObjects.length) {\n        gObjectNumRef.current = index;\n      }\n    }\n    if (keycode === 38) {\n      // Up arrow\n      if (gObjectNumRef.current > 0) {\n        gObjectNumRef.current--;\n      }\n    }\n    if (keycode === 40) {\n      // Down arrow\n      if (gObjectNumRef.current < allObjects.length - 1) {\n        gObjectNumRef.current++;\n      }\n    }\n\n    // Move with WASD keys\n    if (keycode === 87) {\n      // W\n      allObjects[gObjectNum].move(new Vec2(0, -10));\n    }\n    if (keycode === 83) {\n      // S\n      allObjects[gObjectNum].move(new Vec2(0, 10));\n    }\n    if (keycode === 65) {\n      // A\n      allObjects[gObjectNum].move(new Vec2(-10, 0));\n    }\n    if (keycode === 68) {\n      // D\n      allObjects[gObjectNum].move(new Vec2(10, 0));\n    }\n\n    // Rotate with QE keys\n    if (keycode === 81) {\n      // Q\n      allObjects[gObjectNum].rotate(-0.1);\n    }\n    if (keycode === 69) {\n      // E\n      allObjects[gObjectNum].rotate(0.1);\n    }\n\n    // Toggle gravity with the H key\n    if (keycode === 72) {\n      // H\n      const currentObj = allObjects[gObjectNum];\n      currentObj.mFix = currentObj.mFix === 0 ? 1 : 0;\n    }\n\n    // Reset with the R key\n    if (keycode === 82) {\n      // R\n      allObjectsRef.current.splice(1, allObjects.length - 1); // Keep only the first object\n      gObjectNumRef.current = 0;\n    }\n  }, []);\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LUiQhyNSgK72SaPnEt0fZFPODbc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Vec2","Rectangle","Circle","CollisionInfo","jsxDEV","_jsxDEV","App","_s","mGravity","mMovement","mPositionalCorrectionFlag","mRelaxationCount","mPosCorrectionRate","canvasRef","allObjectsRef","gObjectNumRef","mainContext","setMaincontext","updateGameObjects","canvas","current","context","getContext","width","height","clearRect","forEach","obj","update","draw","collisionInfo","drawCollisionInfo","beginPath","moveTo","mStart","x","y","lineTo","mEnd","closePath","strokeStyle","stroke","positionalCorrection","s1","s2","s1InvMass","mInvMass","s2InvMass","num","getDepth","correctionAmount","getNormal","scale","move","resolveCollision","n","v1","mVelocity","v2","relativeVelocity","subtract","rVelocityInNormal","dot","newRestituion","Math","min","mRestitution","newFriction","mFriction","jN","impulse","add","tangent","normalize","jT","k","i","length","j","boundTest","collisionTest","mCenter","changeDir","r1","runGameLoop","requestAnimationFrame","intervalId","setInterval","randomX","random","randomY","clearInterval","handleKeyDown","event","keycode","keyCode","which","allObjects","gObjectNum","r5","rotate","r6","index","currentObj","mFix","splice","window","addEventListener","removeEventListener","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/apps/physics/physics_engine/physics-engine/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Vec2 from './Vec2';\nimport Rectangle from './Rectangle';\nimport Circle from './Circle';\nimport CollisionInfo from './CollisionInfo';\n\nconst App = () => {\n  let mGravity = new Vec2(0, 10);\n  let mMovement = true;\n\n  var mPositionalCorrectionFlag = true;\n // number of relaxation iteration\n var mRelaxationCount = 15;\n // percentage of separation to project objects\n var mPosCorrectionRate = 0.8;\n\n  const canvasRef = useRef(null);\n  const allObjectsRef = useRef([]);\n  const gObjectNumRef = useRef(0);\n  const [mainContext, setMaincontext] = useState();\n\n  const updateGameObjects = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    context.clearRect(0, 0, width, height);\n\n    setMaincontext(context);\n\n    allObjectsRef.current.forEach(obj => {\n      obj.update(canvas);\n      obj.draw(context);\n    });\n\n    var collisionInfo = new CollisionInfo();\n\n    // Функція для малювання інформації про зіткнення\n    var drawCollisionInfo = function (collisionInfo, context) {        \n      context.beginPath();\n      context.moveTo(collisionInfo.mStart.x, collisionInfo.mStart.y);\n      context.lineTo(collisionInfo.mEnd.x, collisionInfo.mEnd.y);\n      context.closePath();\n      context.strokeStyle = \"green\";\n      context.stroke();\n    };\n\n    var positionalCorrection = function (s1, s2, collisionInfo) {\n      var s1InvMass = s1.mInvMass;\n      var s2InvMass = s2.mInvMass;\n      var num = collisionInfo.getDepth() /\n     (s1InvMass + s2InvMass) * mPosCorrectionRate;\n      var correctionAmount = collisionInfo.getNormal().scale(num);\n      s1.move(correctionAmount.scale(-s1InvMass));\n      s2.move(correctionAmount.scale(s2InvMass));\n     };\n\n     var resolveCollision = function (s1, s2, collisionInfo) {\n      if ((s1.mInvMass === 0) && (s2.mInvMass === 0))\n        return;\n        // correct positions\n        if (mPositionalCorrectionFlag)\n        positionalCorrection(s1, s2, collisionInfo);\n        var n = collisionInfo.getNormal();\n        var v1 = s1.mVelocity;\n        var v2 = s2.mVelocity;\n        var relativeVelocity = v2.subtract(v1);\n        // Relative velocity in normal direction\n        var rVelocityInNormal = relativeVelocity.dot(n);\n        // if objects moving apart ignore\n        if (rVelocityInNormal > 0)\n        return;\n        // compute and apply response impulses for each object\n        var newRestituion = Math.min(s1.mRestitution, s2.mRestitution);\n        var newFriction = Math.min(s1.mFriction, s2.mFriction);\n        // Calc impulse scalar\n        var jN = -(1 + newRestituion) * rVelocityInNormal;\n        jN = jN / (s1.mInvMass + s2.mInvMass);\n        //impulse is in direction of normal ( from s1 to s2)\n        var impulse = n.scale(jN);\n        // impulse = F dt = m * v\n        // v = impulse / m\n        s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n        s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n        var tangent = relativeVelocity.subtract(n.scale(relativeVelocity.dot(n)));\n            // relativeVelocity.dot(tangent) should less than 0\n        tangent = tangent.normalize().scale(-1);\n        var jT = -(1 + newRestituion) *\n        relativeVelocity.dot(tangent) * newFriction;\n        jT = jT / (s1.mInvMass + s2.mInvMass);\n        // friction should be less than force in normal direction\n        if (jT > jN) jT = jN;\n        //impulse is from s1 to s2 (in opposite direction of velocity)\n        impulse = tangent.scale(jT);\n        s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n        s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n     };\n\n    for (let k = 0; k < mRelaxationCount; k++) {\n    for (let i = 0; i < allObjectsRef.current.length; i++) {\n      for (let j = i + 1; j < allObjectsRef.current.length; j++) {\n        // if (allObjectsRef.current[i].boundTest(allObjectsRef.current[j])) {  \n                  \n        //   context.strokeStyle = 'green';\n        //   allObjectsRef.current[i].draw(context);\n        //   allObjectsRef.current[j].draw(context);\n        // } else {\n        //   context.strokeStyle = 'blue';\n        // }\n\n        if (allObjectsRef.current[i].boundTest(allObjectsRef.current[j])) {  \n          if (allObjectsRef.current[i].collisionTest(allObjectsRef.current[j], collisionInfo)) {               \n            // Перевірка та зміна напряму нормалі\n            if (collisionInfo.getNormal().dot(allObjectsRef.current[j].mCenter.subtract(allObjectsRef.current[i].mCenter)) < 0) {\n                collisionInfo.changeDir();\n\n            }\n\n            \n            \n            // Малювання інформації про зіткнення\n            drawCollisionInfo(collisionInfo, context);\n\n            resolveCollision(allObjectsRef.current[i],\n              allObjectsRef.current[j],\n              collisionInfo);\n          }\n        }\n      }\n      }\n\n      \n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 450;\n\n    // Initial objects setup\n    let r1 = new Rectangle(new Vec2(200, 200), 40, 40, false);\n    allObjectsRef.current = [r1];\n\n    const runGameLoop = () => {\n      updateGameObjects();\n      requestAnimationFrame(runGameLoop);\n    };\n\n    runGameLoop();\n\n    // Add new rectangles at random positions every 5 seconds\n    const intervalId = setInterval(() => {\n      const canvas = canvasRef.current;\n      const width = canvas.width;\n      const height = canvas.height;\n\n      const randomX = Math.random() * width;\n      const randomY = Math.random() * height;\n\n      //let r1 = new Rectangle(new Vec2(randomX, randomY), 40, 40, false);\n      //allObjectsRef.current = [...allObjectsRef.current, r1];\n    }, 500);\n\n    return () => {\n      clearInterval(intervalId);  // Clean up the interval on component unmount\n    };\n  }, []);\n\n  const handleKeyDown = useCallback((event) => {\n    const keycode = event.keyCode || event.which;\n    const allObjects = allObjectsRef.current;\n    const gObjectNum = gObjectNumRef.current;\n\n    if (keycode === 70) { // F\n      let r1 = new Rectangle(\n        new Vec2(allObjects[gObjectNum].mCenter.x + 200, allObjects[gObjectNum].mCenter.y + 20),\n        Math.random() * 30 + 10,\n        Math.random() * 30 + 10\n      );\n      var r5 = new Rectangle(new Vec2(500, 200), 400, 20, 0, 0.3, 0);\n    r5.rotate(2.8);\n    var r6 = new Rectangle(new Vec2(200, 400), 400, 20, 20, 1, 0.5);\n      allObjectsRef.current = [...allObjects, r1, r5, r6];\n    }\n\n    if (keycode === 71) { // G\n      let r1 = new Circle(\n        new Vec2(allObjects[gObjectNum].mCenter.x, allObjects[gObjectNum].mCenter.y),\n        Math.random() * 10 + 20\n      );\n      allObjectsRef.current = [...allObjects, r1];\n    }\n\n    if (keycode >= 48 && keycode <= 57) { // Number keys\n      const index = keycode - 48;\n      if (index < allObjects.length) {\n        gObjectNumRef.current = index;\n      }\n    }\n\n    if (keycode === 38) { // Up arrow\n      if (gObjectNumRef.current > 0) {\n        gObjectNumRef.current--;\n      }\n    }\n\n    if (keycode === 40) { // Down arrow\n      if (gObjectNumRef.current < allObjects.length - 1) {\n        gObjectNumRef.current++;\n      }\n    }\n\n    // Move with WASD keys\n    if (keycode === 87) { // W\n      allObjects[gObjectNum].move(new Vec2(0, -10));\n    }\n\n    if (keycode === 83) { // S\n      allObjects[gObjectNum].move(new Vec2(0, 10));\n    }\n\n    if (keycode === 65) { // A\n      allObjects[gObjectNum].move(new Vec2(-10, 0));\n    }\n\n    if (keycode === 68) { // D\n      allObjects[gObjectNum].move(new Vec2(10, 0));\n    }\n\n    // Rotate with QE keys\n    if (keycode === 81) { // Q\n      allObjects[gObjectNum].rotate(-0.1);\n    }\n\n    if (keycode === 69) { // E\n      allObjects[gObjectNum].rotate(0.1);\n    }\n\n    // Toggle gravity with the H key\n    if (keycode === 72) { // H\n      const currentObj = allObjects[gObjectNum];\n      currentObj.mFix = currentObj.mFix === 0 ? 1 : 0;\n    }\n\n    // Reset with the R key\n    if (keycode === 82) { // R\n      allObjectsRef.current.splice(1, allObjects.length - 1); // Keep only the first object\n      gObjectNumRef.current = 0;\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} style={{ border: '1px solid black' }}></canvas>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}