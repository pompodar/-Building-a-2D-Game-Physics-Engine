{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/apps/physics/physics_engine/React/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Vec2 from './Vec2';\nimport Rectangle from './Rectangle';\nimport CollisionInfo from './CollisionInfo';\nimport KeyHandler from './KeyHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const containerRef = useRef(null); // Use this ref for appending div elements\n  const allObjectsRef = useRef([]);\n  const gObjectNumRef = useRef(0);\n  const positionalCorrectionFlag = true;\n  const relaxationCount = 15;\n  const mPosCorrectionRate = 0.8;\n  const updateGameObjects = () => {\n    allObjectsRef.current.forEach(obj => {\n      if (obj.mass !== 1000) {\n        obj.move(new Vec2(0, 0.2)); //gravitation\n      }\n      obj.update(); // Update the position and style of div elements\n    });\n    const collisionInfo = new CollisionInfo();\n    const drawCollisionInfo = collisionInfo => {\n      // Handle collision visualization if needed\n    };\n    const positionalCorrection = (s1, s2, collisionInfo) => {\n      const s1InvMass = s1.mInvMass;\n      const s2InvMass = s2.mInvMass;\n      const num = collisionInfo.getDepth() / (s1InvMass + s2InvMass) * mPosCorrectionRate;\n      const correctionAmount = collisionInfo.getNormal().scale(num);\n      s1.move(correctionAmount.scale(-s1InvMass));\n      s2.move(correctionAmount.scale(s2InvMass));\n    };\n    const resolveCollision = (s1, s2, collisionInfo) => {\n      if (s1.mInvMass === 0 || s2.mInvMass === 0) return; // check if either of two objects don't have mass\n\n      if (positionalCorrectionFlag) positionalCorrection(s1, s2, collisionInfo);\n      const n = collisionInfo.getNormal();\n      const v1 = s1.mVelocity;\n      const v2 = s2.mVelocity;\n      const relativeVelocity = v2.subtract(v1);\n      const rVelocityInNormal = relativeVelocity.dot(n);\n      if (rVelocityInNormal > 0) return;\n      const newRestitution = Math.min(s1.mRestitution, s2.mRestitution);\n      const newFriction = Math.min(s1.mFriction, s2.mFriction);\n      let jN = -(1 + newRestitution) * rVelocityInNormal;\n      jN = jN / (s1.mInvMass + s2.mInvMass);\n      let impulse = n.scale(jN);\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n      let tangent = relativeVelocity.subtract(n.scale(relativeVelocity.dot(n)));\n      tangent = tangent.normalize().scale(-1);\n      let jT = -(1 + newRestitution) * relativeVelocity.dot(tangent) * newFriction;\n      jT = jT / (s1.mInvMass + s2.mInvMass);\n      if (jT > jN) jT = jN;\n      impulse = tangent.scale(jT);\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n    };\n    for (let k = 0; k < relaxationCount; k++) {\n      for (let i = 0; i < allObjectsRef.current.length; i++) {\n        for (let j = i + 1; j < allObjectsRef.current.length; j++) {\n          if (allObjectsRef.current[i].boundTest(allObjectsRef.current[j])) {\n            if (allObjectsRef.current[i].collisionTest(allObjectsRef.current[j], collisionInfo)) {\n              if (collisionInfo.getNormal().dot(allObjectsRef.current[j].mCenter.subtract(allObjectsRef.current[i].mCenter)) < 0) {\n                collisionInfo.changeDir();\n              }\n              drawCollisionInfo(collisionInfo);\n              resolveCollision(allObjectsRef.current[i], allObjectsRef.current[j], collisionInfo);\n            }\n          }\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const container = containerRef.current;\n    container.style.position = 'relative'; // Make sure container is positioned relatively\n\n    let r1 = new Rectangle(new Vec2(200, 200), 40, 40, 1, 1, 1, 1);\n    allObjectsRef.current = [r1];\n    const runGameLoop = () => {\n      updateGameObjects();\n      requestAnimationFrame(runGameLoop);\n    };\n    runGameLoop();\n    const intervalId = setInterval(() => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      const randomX = Math.random() * width;\n      const randomY = Math.random() * height;\n      let r1 = new Rectangle(new Vec2(randomX, randomY), 40, 40);\n      allObjectsRef.current = [...allObjectsRef.current, r1];\n    }, 500);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100vw',\n      height: '100vh',\n      border: '1px solid black'\n    },\n    children: /*#__PURE__*/_jsxDEV(KeyHandler, {\n      allObjectsRef: allObjectsRef,\n      gObjectNumRef: gObjectNumRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Cgiod2KedYSKF23C8uLKyg9ylIU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","Vec2","Rectangle","CollisionInfo","KeyHandler","jsxDEV","_jsxDEV","App","_s","containerRef","allObjectsRef","gObjectNumRef","positionalCorrectionFlag","relaxationCount","mPosCorrectionRate","updateGameObjects","current","forEach","obj","mass","move","update","collisionInfo","drawCollisionInfo","positionalCorrection","s1","s2","s1InvMass","mInvMass","s2InvMass","num","getDepth","correctionAmount","getNormal","scale","resolveCollision","n","v1","mVelocity","v2","relativeVelocity","subtract","rVelocityInNormal","dot","newRestitution","Math","min","mRestitution","newFriction","mFriction","jN","impulse","add","tangent","normalize","jT","k","i","length","j","boundTest","collisionTest","mCenter","changeDir","container","style","position","r1","runGameLoop","requestAnimationFrame","intervalId","setInterval","width","clientWidth","height","clientHeight","randomX","random","randomY","clearInterval","ref","border","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/apps/physics/physics_engine/React/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Vec2 from './Vec2';\nimport Rectangle from './Rectangle';\nimport CollisionInfo from './CollisionInfo';\nimport KeyHandler from './KeyHandler';\n\nconst App = () => {\n  const containerRef = useRef(null); // Use this ref for appending div elements\n  const allObjectsRef = useRef([]);\n  const gObjectNumRef = useRef(0);\n\n  const positionalCorrectionFlag = true;\n  const relaxationCount = 15;\n  const mPosCorrectionRate = 0.8;\n\n  const updateGameObjects = () => {\n    allObjectsRef.current.forEach((obj) => {\n\n      if (obj.mass !== 1000) {\n        obj.move(new Vec2(0, 0.2)); //gravitation\n      }  \n        \n      obj.update(); // Update the position and style of div elements\n\n    });\n\n    const collisionInfo = new CollisionInfo();\n\n    const drawCollisionInfo = (collisionInfo) => {\n      // Handle collision visualization if needed\n    };\n\n    const positionalCorrection = (s1, s2, collisionInfo) => {\n      const s1InvMass = s1.mInvMass;\n      const s2InvMass = s2.mInvMass;\n      const num =\n        (collisionInfo.getDepth() / (s1InvMass + s2InvMass)) *\n        mPosCorrectionRate;\n      const correctionAmount = collisionInfo.getNormal().scale(num);\n      s1.move(correctionAmount.scale(-s1InvMass));\n      s2.move(correctionAmount.scale(s2InvMass));\n    };\n\n    const resolveCollision = (s1, s2, collisionInfo) => {\n      if (s1.mInvMass === 0 || s2.mInvMass === 0) return; // check if either of two objects don't have mass\n      \n      if (positionalCorrectionFlag) positionalCorrection(s1, s2, collisionInfo);\n      \n      const n = collisionInfo.getNormal();\n      const v1 = s1.mVelocity;\n      const v2 = s2.mVelocity;\n      const relativeVelocity = v2.subtract(v1);\n      const rVelocityInNormal = relativeVelocity.dot(n);\n\n      if (rVelocityInNormal > 0) return;\n\n      const newRestitution = Math.min(s1.mRestitution, s2.mRestitution);\n      const newFriction = Math.min(s1.mFriction, s2.mFriction);\n\n      let jN = -(1 + newRestitution) * rVelocityInNormal;\n      jN = jN / (s1.mInvMass + s2.mInvMass);\n\n      let impulse = n.scale(jN);\n\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n\n      let tangent = relativeVelocity.subtract(\n        n.scale(relativeVelocity.dot(n))\n      );\n\n      tangent = tangent.normalize().scale(-1);\n      let jT =\n        -(1 + newRestitution) * relativeVelocity.dot(tangent) * newFriction;\n      jT = jT / (s1.mInvMass + s2.mInvMass);\n\n      if (jT > jN) jT = jN;\n\n      impulse = tangent.scale(jT);\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n    };\n\n    for (let k = 0; k < relaxationCount; k++) {\n      for (let i = 0; i < allObjectsRef.current.length; i++) {\n        for (let j = i + 1; j < allObjectsRef.current.length; j++) {\n          if (\n            allObjectsRef.current[i].boundTest(allObjectsRef.current[j])\n          ) {\n            if (\n              allObjectsRef.current[i].collisionTest(\n                allObjectsRef.current[j],\n                collisionInfo\n              )\n            ) {\n              if (\n                collisionInfo\n                  .getNormal()\n                  .dot(\n                    allObjectsRef.current[j].mCenter.subtract(\n                      allObjectsRef.current[i].mCenter\n                    )\n                  ) < 0\n              ) {\n                collisionInfo.changeDir();\n              }\n\n              drawCollisionInfo(collisionInfo);\n              resolveCollision(\n                allObjectsRef.current[i],\n                allObjectsRef.current[j],\n                collisionInfo\n              );\n            }\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    const container = containerRef.current;\n    container.style.position = 'relative'; // Make sure container is positioned relatively\n\n    let r1 = new Rectangle(new Vec2(200, 200), 40, 40, 1, 1, 1, 1);\n    allObjectsRef.current = [r1];\n\n    const runGameLoop = () => {\n      updateGameObjects();\n      requestAnimationFrame(runGameLoop);\n    };\n\n    runGameLoop();\n\n    const intervalId = setInterval(() => {\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n\n      const randomX = Math.random() * width;\n      const randomY = Math.random() * height;\n\n      let r1 = new Rectangle(new Vec2(randomX, randomY), 40, 40);\n      allObjectsRef.current = [...allObjectsRef.current, r1];\n    }, 500);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  return (\n    <div ref={containerRef} style={{ width: '100vw', height: '100vh', border: '1px solid black' }}>\n      <KeyHandler allObjectsRef={allObjectsRef} gObjectNumRef={gObjectNumRef} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}