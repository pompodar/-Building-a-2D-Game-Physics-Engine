{"ast":null,"code":"import Vec2 from './Vec2';\nclass RigidShape {\n  constructor(center, mass = 1, friction = 0.8, restitution = 0.2) {\n    this.mCenter = center;\n    this.width = 40;\n    this.height = 40;\n    this.mAngle = 0;\n    this.mFix = 0;\n    this.mVelocity = new Vec2(0, 0);\n    this.mAcceleration = new Vec2(0, 10); // Gravity\n\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n    this.mVertex = [];\n    this.mFaceNormal = [];\n    this.mVertex[0] = new Vec2(center.x - this.width / 2, center.y - this.height / 2);\n    this.mVertex[1] = new Vec2(center.x + this.width / 2, center.y - this.height / 2);\n    this.mVertex[2] = new Vec2(center.x + this.width / 2, center.y + this.height / 2);\n    this.mVertex[3] = new Vec2(center.x - this.width / 2, center.y + this.height / 2);\n    this.mFaceNormal[0] = this.mVertex[1].subtract(this.mVertex[2]).normalize();\n    this.mFaceNormal[1] = this.mVertex[2].subtract(this.mVertex[3]).normalize();\n    this.mFaceNormal[2] = this.mVertex[3].subtract(this.mVertex[0]).normalize();\n    this.mFaceNormal[3] = this.mVertex[0].subtract(this.mVertex[1]).normalize();\n    this.mInvMass = mass !== 0 ? 1 / mass : 0;\n    this.mFriction = friction;\n    this.mRestitution = restitution;\n    if (this.mInvMass !== 0) {\n      this.mAcceleration = new Vec2(0, 10);\n    } else {\n      this.mAcceleration = new Vec2(0, 0);\n    }\n    this.mBoundRadius = 0;\n    this.updateInertia();\n  }\n  update(canvasDimensions) {\n    if (this.mFix === 0) {\n      const dt = 200;\n      this.mVelocity = this.mVelocity.add(this.mAcceleration.scale(dt));\n      this.move(this.mVelocity.scale(dt));\n      this.mAngularVelocity += this.mAngularAcceleration * dt;\n      this.rotate(this.mAngularVelocity * dt);\n    }\n  }\n  move(vec) {\n    this.mCenter = this.mCenter.add(vec);\n  }\n  rotate(angle) {\n    this.mAngle += angle;\n  }\n  boundTest(otherShape) {\n    const vFrom1to2 = otherShape.mCenter.subtract(this.mCenter);\n    const rSum = this.mBoundRadius + otherShape.mBoundRadius;\n    const dist = vFrom1to2.length();\n    return dist <= rSum;\n  }\n  updateMass(delta) {\n    let mass = this.mInvMass !== 0 ? 1 / this.mInvMass : 0;\n    mass += delta;\n    if (mass <= 0) {\n      this.mInvMass = 0;\n      this.mVelocity = new Vec2(0, 0);\n      this.mAcceleration = new Vec2(0, 0);\n      this.mAngularVelocity = 0;\n      this.mAngularAcceleration = 0;\n    } else {\n      this.mInvMass = 1 / mass;\n      this.mAcceleration = new Vec2(0, 10);\n    }\n    this.updateInertia();\n  }\n  updateInertia() {\n    if (this.mInvMass === 0) {\n      this.mInertia = 0;\n    } else {\n      const inertia = 1 / this.mInvMass * ((this.width ** 2 + this.height ** 2) / 12);\n      this.mInertia = 1 / inertia;\n    }\n  }\n}\nexport default RigidShape;","map":{"version":3,"names":["Vec2","RigidShape","constructor","center","mass","friction","restitution","mCenter","width","height","mAngle","mFix","mVelocity","mAcceleration","mAngularVelocity","mAngularAcceleration","mVertex","mFaceNormal","x","y","subtract","normalize","mInvMass","mFriction","mRestitution","mBoundRadius","updateInertia","update","canvasDimensions","dt","add","scale","move","rotate","vec","angle","boundTest","otherShape","vFrom1to2","rSum","dist","length","updateMass","delta","mInertia","inertia"],"sources":["/Users/mac/Desktop/apps/physics/physics_engine/physics-engine/src/RigidShape.js"],"sourcesContent":["import Vec2 from './Vec2';\n\nclass RigidShape {\n  constructor(center, mass = 1, friction = 0.8, restitution = 0.2) {\n    this.mCenter = center;\n    this.width = 40;\n    this.height = 40;\n    this.mAngle = 0;\n    this.mFix = 0;\n\n    this.mVelocity = new Vec2(0, 0);\n    this.mAcceleration = new Vec2(0, 10); // Gravity\n\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n\n    this.mVertex = [];\n    this.mFaceNormal = [];\n\n    this.mVertex[0] = new Vec2(center.x - this.width / 2, center.y - this.height / 2);\n    this.mVertex[1] = new Vec2(center.x + this.width / 2, center.y - this.height / 2);\n    this.mVertex[2] = new Vec2(center.x + this.width / 2, center.y + this.height / 2);\n    this.mVertex[3] = new Vec2(center.x - this.width / 2, center.y + this.height / 2);\n\n    this.mFaceNormal[0] = this.mVertex[1].subtract(this.mVertex[2]).normalize();\n    this.mFaceNormal[1] = this.mVertex[2].subtract(this.mVertex[3]).normalize();\n    this.mFaceNormal[2] = this.mVertex[3].subtract(this.mVertex[0]).normalize();\n    this.mFaceNormal[3] = this.mVertex[0].subtract(this.mVertex[1]).normalize();\n\n    this.mInvMass = mass !== 0 ? 1 / mass : 0;\n    this.mFriction = friction;\n    this.mRestitution = restitution;\n\n    if (this.mInvMass !== 0) {\n      this.mAcceleration = new Vec2(0, 10);\n    } else {\n      this.mAcceleration = new Vec2(0, 0);\n    }\n\n    this.mBoundRadius = 0;\n    this.updateInertia();\n  }\n\n  update(canvasDimensions) {\n    if (this.mFix === 0) {\n      const dt = 200;\n      this.mVelocity = this.mVelocity.add(this.mAcceleration.scale(dt));\n      this.move(this.mVelocity.scale(dt));\n      this.mAngularVelocity += this.mAngularAcceleration * dt;\n      this.rotate(this.mAngularVelocity * dt);\n    }\n  }\n\n  move(vec) {\n    this.mCenter = this.mCenter.add(vec);\n  }\n\n  rotate(angle) {\n    this.mAngle += angle;\n  }\n\n  boundTest(otherShape) {\n    const vFrom1to2 = otherShape.mCenter.subtract(this.mCenter);\n    const rSum = this.mBoundRadius + otherShape.mBoundRadius;\n    const dist = vFrom1to2.length();\n\n    return dist <= rSum;\n  }\n\n  updateMass(delta) {\n    let mass = this.mInvMass !== 0 ? 1 / this.mInvMass : 0;\n    mass += delta;\n\n    if (mass <= 0) {\n      this.mInvMass = 0;\n      this.mVelocity = new Vec2(0, 0);\n      this.mAcceleration = new Vec2(0, 0);\n      this.mAngularVelocity = 0;\n      this.mAngularAcceleration = 0;\n    } else {\n      this.mInvMass = 1 / mass;\n      this.mAcceleration = new Vec2(0, 10);\n    }\n\n    this.updateInertia();\n  }\n\n  updateInertia() {\n    if (this.mInvMass === 0) {\n      this.mInertia = 0;\n    } else {\n      const inertia = (1 / this.mInvMass) * ((this.width ** 2 + this.height ** 2) / 12);\n      this.mInertia = 1 / inertia;\n    }\n  }\n}\n\nexport default RigidShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}