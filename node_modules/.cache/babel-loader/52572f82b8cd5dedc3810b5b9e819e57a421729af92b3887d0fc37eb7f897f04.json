{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/apps/physics/physics_engine/physics-engine/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Vec2 from './Vec2';\nimport Rectangle from './Rectangle';\nimport CollisionInfo from './CollisionInfo';\nimport KeyHandler from './KeyHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const allObjectsRef = useRef([]);\n  const gObjectNumRef = useRef(0);\n  const GRAVITY = new Vec2(0, 10);\n  const movement = true;\n  const positionalCorrectionFlag = true;\n  const relaxationCount = 15;\n  const mPosCorrectionRate = 0.8;\n  const updateGameObjects = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n    context.clearRect(0, 0, width, height);\n    allObjectsRef.current.forEach(obj => {\n      obj.update(canvas);\n      obj.draw(context);\n    });\n    const collisionInfo = new CollisionInfo();\n    const drawCollisionInfo = (collisionInfo, context) => {\n      context.beginPath();\n      context.moveTo(collisionInfo.mStart.x, collisionInfo.mStart.y);\n      context.lineTo(collisionInfo.mEnd.x, collisionInfo.mEnd.y);\n      context.closePath();\n      context.strokeStyle = 'green';\n      context.stroke();\n    };\n    const positionalCorrection = (s1, s2, collisionInfo) => {\n      const s1InvMass = s1.mInvMass;\n      const s2InvMass = s2.mInvMass;\n      const num = collisionInfo.getDepth() / (s1InvMass + s2InvMass) * mPosCorrectionRate;\n      const correctionAmount = collisionInfo.getNormal().scale(num);\n      s1.move(correctionAmount.scale(-s1InvMass));\n      s2.move(correctionAmount.scale(s2InvMass));\n    };\n    const resolveCollision = (s1, s2, collisionInfo) => {\n      if (s1.mInvMass === 0 && s2.mInvMass === 0) return;\n      if (positionalCorrectionFlag) positionalCorrection(s1, s2, collisionInfo);\n      const n = collisionInfo.getNormal();\n      const v1 = s1.mVelocity;\n      const v2 = s2.mVelocity;\n      const relativeVelocity = v2.subtract(v1);\n      const rVelocityInNormal = relativeVelocity.dot(n);\n      if (rVelocityInNormal > 0) return;\n      const newRestitution = Math.min(s1.mRestitution, s2.mRestitution);\n      const newFriction = Math.min(s1.mFriction, s2.mFriction);\n      let jN = -(1 + newRestitution) * rVelocityInNormal;\n      jN = jN / (s1.mInvMass + s2.mInvMass);\n      let impulse = n.scale(jN);\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n      let tangent = relativeVelocity.subtract(n.scale(relativeVelocity.dot(n)));\n      tangent = tangent.normalize().scale(-1);\n      let jT = -(1 + newRestitution) * relativeVelocity.dot(tangent) * newFriction;\n      jT = jT / (s1.mInvMass + s2.mInvMass);\n      if (jT > jN) jT = jN;\n      impulse = tangent.scale(jT);\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n    };\n    for (let k = 0; k < relaxationCount; k++) {\n      for (let i = 0; i < allObjectsRef.current.length; i++) {\n        for (let j = i + 1; j < allObjectsRef.current.length; j++) {\n          if (allObjectsRef.current[i].boundTest(allObjectsRef.current[j])) {\n            if (allObjectsRef.current[i].collisionTest(allObjectsRef.current[j], collisionInfo)) {\n              if (collisionInfo.getNormal().dot(allObjectsRef.current[j].mCenter.subtract(allObjectsRef.current[i].mCenter)) < 0) {\n                collisionInfo.changeDir();\n              }\n              drawCollisionInfo(collisionInfo, context);\n              resolveCollision(allObjectsRef.current[i], allObjectsRef.current[j], collisionInfo);\n            }\n          }\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 450;\n    let r1 = new Rectangle(new Vec2(200, 200), 40, 40);\n    allObjectsRef.current = [r1];\n    const runGameLoop = () => {\n      updateGameObjects();\n      requestAnimationFrame(runGameLoop);\n    };\n    runGameLoop();\n    const intervalId = setInterval(() => {\n      const width = canvas.width;\n      const height = canvas.height;\n      const randomX = Math.random() * width;\n      const randomY = Math.random() * height;\n      let r1 = new Rectangle(new Vec2(randomX, randomY), 40, 40);\n      allObjectsRef.current = [...allObjectsRef.current, r1];\n    }, 5000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: '1px solid black'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(KeyHandler, {\n      allObjectsRef: allObjectsRef,\n      gObjectNumRef: gObjectNumRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"SOGOVYuSq/uj4TEw+yZ+THsPLTU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","Vec2","Rectangle","CollisionInfo","KeyHandler","jsxDEV","_jsxDEV","App","_s","canvasRef","allObjectsRef","gObjectNumRef","GRAVITY","movement","positionalCorrectionFlag","relaxationCount","mPosCorrectionRate","updateGameObjects","canvas","current","context","getContext","width","height","clearRect","forEach","obj","update","draw","collisionInfo","drawCollisionInfo","beginPath","moveTo","mStart","x","y","lineTo","mEnd","closePath","strokeStyle","stroke","positionalCorrection","s1","s2","s1InvMass","mInvMass","s2InvMass","num","getDepth","correctionAmount","getNormal","scale","move","resolveCollision","n","v1","mVelocity","v2","relativeVelocity","subtract","rVelocityInNormal","dot","newRestitution","Math","min","mRestitution","newFriction","mFriction","jN","impulse","add","tangent","normalize","jT","k","i","length","j","boundTest","collisionTest","mCenter","changeDir","r1","runGameLoop","requestAnimationFrame","intervalId","setInterval","randomX","random","randomY","clearInterval","children","ref","style","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/apps/physics/physics_engine/physics-engine/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Vec2 from './Vec2';\nimport Rectangle from './Rectangle';\nimport CollisionInfo from './CollisionInfo';\nimport KeyHandler from './KeyHandler';\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const allObjectsRef = useRef([]);\n  const gObjectNumRef = useRef(0);\n\n  const GRAVITY = new Vec2(0, 10);\n  const movement = true;\n  const positionalCorrectionFlag = true;\n  const relaxationCount = 15;\n  const mPosCorrectionRate = 0.8;\n\n  const updateGameObjects = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const width = canvas.width;\n    const height = canvas.height;\n\n    context.clearRect(0, 0, width, height);\n\n    allObjectsRef.current.forEach((obj) => {\n      obj.update(canvas);\n      obj.draw(context);\n    });\n\n    const collisionInfo = new CollisionInfo();\n\n    const drawCollisionInfo = (collisionInfo, context) => {\n      context.beginPath();\n      context.moveTo(collisionInfo.mStart.x, collisionInfo.mStart.y);\n      context.lineTo(collisionInfo.mEnd.x, collisionInfo.mEnd.y);\n      context.closePath();\n      context.strokeStyle = 'green';\n      context.stroke();\n    };\n\n    const positionalCorrection = (s1, s2, collisionInfo) => {\n      const s1InvMass = s1.mInvMass;\n      const s2InvMass = s2.mInvMass;\n      const num =\n        (collisionInfo.getDepth() / (s1InvMass + s2InvMass)) *\n        mPosCorrectionRate;\n      const correctionAmount = collisionInfo.getNormal().scale(num);\n      s1.move(correctionAmount.scale(-s1InvMass));\n      s2.move(correctionAmount.scale(s2InvMass));\n    };\n\n    const resolveCollision = (s1, s2, collisionInfo) => {\n      if (s1.mInvMass === 0 && s2.mInvMass === 0) return;\n\n      if (positionalCorrectionFlag) positionalCorrection(s1, s2, collisionInfo);\n      const n = collisionInfo.getNormal();\n      const v1 = s1.mVelocity;\n      const v2 = s2.mVelocity;\n      const relativeVelocity = v2.subtract(v1);\n      const rVelocityInNormal = relativeVelocity.dot(n);\n\n      if (rVelocityInNormal > 0) return;\n\n      const newRestitution = Math.min(s1.mRestitution, s2.mRestitution);\n      const newFriction = Math.min(s1.mFriction, s2.mFriction);\n\n      let jN = -(1 + newRestitution) * rVelocityInNormal;\n      jN = jN / (s1.mInvMass + s2.mInvMass);\n\n      let impulse = n.scale(jN);\n\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n\n      let tangent = relativeVelocity.subtract(\n        n.scale(relativeVelocity.dot(n))\n      );\n\n      tangent = tangent.normalize().scale(-1);\n      let jT =\n        -(1 + newRestitution) * relativeVelocity.dot(tangent) * newFriction;\n      jT = jT / (s1.mInvMass + s2.mInvMass);\n\n      if (jT > jN) jT = jN;\n\n      impulse = tangent.scale(jT);\n      s1.mVelocity = s1.mVelocity.subtract(impulse.scale(s1.mInvMass));\n      s2.mVelocity = s2.mVelocity.add(impulse.scale(s2.mInvMass));\n    };\n\n    for (let k = 0; k < relaxationCount; k++) {\n      for (let i = 0; i < allObjectsRef.current.length; i++) {\n        for (let j = i + 1; j < allObjectsRef.current.length; j++) {\n          if (\n            allObjectsRef.current[i].boundTest(allObjectsRef.current[j])\n          ) {\n            if (\n              allObjectsRef.current[i].collisionTest(\n                allObjectsRef.current[j],\n                collisionInfo\n              )\n            ) {\n              if (\n                collisionInfo\n                  .getNormal()\n                  .dot(\n                    allObjectsRef.current[j].mCenter.subtract(\n                      allObjectsRef.current[i].mCenter\n                    )\n                  ) < 0\n              ) {\n                collisionInfo.changeDir();\n              }\n\n              drawCollisionInfo(collisionInfo, context);\n              resolveCollision(\n                allObjectsRef.current[i],\n                allObjectsRef.current[j],\n                collisionInfo\n              );\n            }\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 800;\n    canvas.height = 450;\n\n    let r1 = new Rectangle(new Vec2(200, 200), 40, 40);\n    allObjectsRef.current = [r1];\n\n    const runGameLoop = () => {\n      updateGameObjects();\n      requestAnimationFrame(runGameLoop);\n    };\n\n    runGameLoop();\n\n    const intervalId = setInterval(() => {\n      const width = canvas.width;\n      const height = canvas.height;\n\n      const randomX = Math.random() * width;\n      const randomY = Math.random() * height;\n\n      let r1 = new Rectangle(new Vec2(randomX, randomY), 40, 40);\n      allObjectsRef.current = [...allObjectsRef.current, r1];\n    }, 5000);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} style={{ border: '1px solid black' }}></canvas>\n      <KeyHandler allObjectsRef={allObjectsRef} gObjectNumRef={gObjectNumRef} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMU,aAAa,GAAGV,MAAM,CAAC,EAAE,CAAC;EAChC,MAAMW,aAAa,GAAGX,MAAM,CAAC,CAAC,CAAC;EAE/B,MAAMY,OAAO,GAAG,IAAIX,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,MAAMY,QAAQ,GAAG,IAAI;EACrB,MAAMC,wBAAwB,GAAG,IAAI;EACrC,MAAMC,eAAe,GAAG,EAAE;EAC1B,MAAMC,kBAAkB,GAAG,GAAG;EAE9B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,MAAM,GAAGT,SAAS,CAACU,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC,MAAMC,KAAK,GAAGJ,MAAM,CAACI,KAAK;IAC1B,MAAMC,MAAM,GAAGL,MAAM,CAACK,MAAM;IAE5BH,OAAO,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEF,KAAK,EAAEC,MAAM,CAAC;IAEtCb,aAAa,CAACS,OAAO,CAACM,OAAO,CAAEC,GAAG,IAAK;MACrCA,GAAG,CAACC,MAAM,CAACT,MAAM,CAAC;MAClBQ,GAAG,CAACE,IAAI,CAACR,OAAO,CAAC;IACnB,CAAC,CAAC;IAEF,MAAMS,aAAa,GAAG,IAAI1B,aAAa,CAAC,CAAC;IAEzC,MAAM2B,iBAAiB,GAAGA,CAACD,aAAa,EAAET,OAAO,KAAK;MACpDA,OAAO,CAACW,SAAS,CAAC,CAAC;MACnBX,OAAO,CAACY,MAAM,CAACH,aAAa,CAACI,MAAM,CAACC,CAAC,EAAEL,aAAa,CAACI,MAAM,CAACE,CAAC,CAAC;MAC9Df,OAAO,CAACgB,MAAM,CAACP,aAAa,CAACQ,IAAI,CAACH,CAAC,EAAEL,aAAa,CAACQ,IAAI,CAACF,CAAC,CAAC;MAC1Df,OAAO,CAACkB,SAAS,CAAC,CAAC;MACnBlB,OAAO,CAACmB,WAAW,GAAG,OAAO;MAC7BnB,OAAO,CAACoB,MAAM,CAAC,CAAC;IAClB,CAAC;IAED,MAAMC,oBAAoB,GAAGA,CAACC,EAAE,EAAEC,EAAE,EAAEd,aAAa,KAAK;MACtD,MAAMe,SAAS,GAAGF,EAAE,CAACG,QAAQ;MAC7B,MAAMC,SAAS,GAAGH,EAAE,CAACE,QAAQ;MAC7B,MAAME,GAAG,GACNlB,aAAa,CAACmB,QAAQ,CAAC,CAAC,IAAIJ,SAAS,GAAGE,SAAS,CAAC,GACnD9B,kBAAkB;MACpB,MAAMiC,gBAAgB,GAAGpB,aAAa,CAACqB,SAAS,CAAC,CAAC,CAACC,KAAK,CAACJ,GAAG,CAAC;MAC7DL,EAAE,CAACU,IAAI,CAACH,gBAAgB,CAACE,KAAK,CAAC,CAACP,SAAS,CAAC,CAAC;MAC3CD,EAAE,CAACS,IAAI,CAACH,gBAAgB,CAACE,KAAK,CAACL,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED,MAAMO,gBAAgB,GAAGA,CAACX,EAAE,EAAEC,EAAE,EAAEd,aAAa,KAAK;MAClD,IAAIa,EAAE,CAACG,QAAQ,KAAK,CAAC,IAAIF,EAAE,CAACE,QAAQ,KAAK,CAAC,EAAE;MAE5C,IAAI/B,wBAAwB,EAAE2B,oBAAoB,CAACC,EAAE,EAAEC,EAAE,EAAEd,aAAa,CAAC;MACzE,MAAMyB,CAAC,GAAGzB,aAAa,CAACqB,SAAS,CAAC,CAAC;MACnC,MAAMK,EAAE,GAAGb,EAAE,CAACc,SAAS;MACvB,MAAMC,EAAE,GAAGd,EAAE,CAACa,SAAS;MACvB,MAAME,gBAAgB,GAAGD,EAAE,CAACE,QAAQ,CAACJ,EAAE,CAAC;MACxC,MAAMK,iBAAiB,GAAGF,gBAAgB,CAACG,GAAG,CAACP,CAAC,CAAC;MAEjD,IAAIM,iBAAiB,GAAG,CAAC,EAAE;MAE3B,MAAME,cAAc,GAAGC,IAAI,CAACC,GAAG,CAACtB,EAAE,CAACuB,YAAY,EAAEtB,EAAE,CAACsB,YAAY,CAAC;MACjE,MAAMC,WAAW,GAAGH,IAAI,CAACC,GAAG,CAACtB,EAAE,CAACyB,SAAS,EAAExB,EAAE,CAACwB,SAAS,CAAC;MAExD,IAAIC,EAAE,GAAG,EAAE,CAAC,GAAGN,cAAc,CAAC,GAAGF,iBAAiB;MAClDQ,EAAE,GAAGA,EAAE,IAAI1B,EAAE,CAACG,QAAQ,GAAGF,EAAE,CAACE,QAAQ,CAAC;MAErC,IAAIwB,OAAO,GAAGf,CAAC,CAACH,KAAK,CAACiB,EAAE,CAAC;MAEzB1B,EAAE,CAACc,SAAS,GAAGd,EAAE,CAACc,SAAS,CAACG,QAAQ,CAACU,OAAO,CAAClB,KAAK,CAACT,EAAE,CAACG,QAAQ,CAAC,CAAC;MAChEF,EAAE,CAACa,SAAS,GAAGb,EAAE,CAACa,SAAS,CAACc,GAAG,CAACD,OAAO,CAAClB,KAAK,CAACR,EAAE,CAACE,QAAQ,CAAC,CAAC;MAE3D,IAAI0B,OAAO,GAAGb,gBAAgB,CAACC,QAAQ,CACrCL,CAAC,CAACH,KAAK,CAACO,gBAAgB,CAACG,GAAG,CAACP,CAAC,CAAC,CACjC,CAAC;MAEDiB,OAAO,GAAGA,OAAO,CAACC,SAAS,CAAC,CAAC,CAACrB,KAAK,CAAC,CAAC,CAAC,CAAC;MACvC,IAAIsB,EAAE,GACJ,EAAE,CAAC,GAAGX,cAAc,CAAC,GAAGJ,gBAAgB,CAACG,GAAG,CAACU,OAAO,CAAC,GAAGL,WAAW;MACrEO,EAAE,GAAGA,EAAE,IAAI/B,EAAE,CAACG,QAAQ,GAAGF,EAAE,CAACE,QAAQ,CAAC;MAErC,IAAI4B,EAAE,GAAGL,EAAE,EAAEK,EAAE,GAAGL,EAAE;MAEpBC,OAAO,GAAGE,OAAO,CAACpB,KAAK,CAACsB,EAAE,CAAC;MAC3B/B,EAAE,CAACc,SAAS,GAAGd,EAAE,CAACc,SAAS,CAACG,QAAQ,CAACU,OAAO,CAAClB,KAAK,CAACT,EAAE,CAACG,QAAQ,CAAC,CAAC;MAChEF,EAAE,CAACa,SAAS,GAAGb,EAAE,CAACa,SAAS,CAACc,GAAG,CAACD,OAAO,CAAClB,KAAK,CAACR,EAAE,CAACE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED,KAAK,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3D,eAAe,EAAE2D,CAAC,EAAE,EAAE;MACxC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjE,aAAa,CAACS,OAAO,CAACyD,MAAM,EAAED,CAAC,EAAE,EAAE;QACrD,KAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAGnE,aAAa,CAACS,OAAO,CAACyD,MAAM,EAAEC,CAAC,EAAE,EAAE;UACzD,IACEnE,aAAa,CAACS,OAAO,CAACwD,CAAC,CAAC,CAACG,SAAS,CAACpE,aAAa,CAACS,OAAO,CAAC0D,CAAC,CAAC,CAAC,EAC5D;YACA,IACEnE,aAAa,CAACS,OAAO,CAACwD,CAAC,CAAC,CAACI,aAAa,CACpCrE,aAAa,CAACS,OAAO,CAAC0D,CAAC,CAAC,EACxBhD,aACF,CAAC,EACD;cACA,IACEA,aAAa,CACVqB,SAAS,CAAC,CAAC,CACXW,GAAG,CACFnD,aAAa,CAACS,OAAO,CAAC0D,CAAC,CAAC,CAACG,OAAO,CAACrB,QAAQ,CACvCjD,aAAa,CAACS,OAAO,CAACwD,CAAC,CAAC,CAACK,OAC3B,CACF,CAAC,GAAG,CAAC,EACP;gBACAnD,aAAa,CAACoD,SAAS,CAAC,CAAC;cAC3B;cAEAnD,iBAAiB,CAACD,aAAa,EAAET,OAAO,CAAC;cACzCiC,gBAAgB,CACd3C,aAAa,CAACS,OAAO,CAACwD,CAAC,CAAC,EACxBjE,aAAa,CAACS,OAAO,CAAC0D,CAAC,CAAC,EACxBhD,aACF,CAAC;YACH;UACF;QACF;MACF;IACF;EACF,CAAC;EAED9B,SAAS,CAAC,MAAM;IACd,MAAMmB,MAAM,GAAGT,SAAS,CAACU,OAAO;IAChCD,MAAM,CAACI,KAAK,GAAG,GAAG;IAClBJ,MAAM,CAACK,MAAM,GAAG,GAAG;IAEnB,IAAI2D,EAAE,GAAG,IAAIhF,SAAS,CAAC,IAAID,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAClDS,aAAa,CAACS,OAAO,GAAG,CAAC+D,EAAE,CAAC;IAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxBlE,iBAAiB,CAAC,CAAC;MACnBmE,qBAAqB,CAACD,WAAW,CAAC;IACpC,CAAC;IAEDA,WAAW,CAAC,CAAC;IAEb,MAAME,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnC,MAAMhE,KAAK,GAAGJ,MAAM,CAACI,KAAK;MAC1B,MAAMC,MAAM,GAAGL,MAAM,CAACK,MAAM;MAE5B,MAAMgE,OAAO,GAAGxB,IAAI,CAACyB,MAAM,CAAC,CAAC,GAAGlE,KAAK;MACrC,MAAMmE,OAAO,GAAG1B,IAAI,CAACyB,MAAM,CAAC,CAAC,GAAGjE,MAAM;MAEtC,IAAI2D,EAAE,GAAG,IAAIhF,SAAS,CAAC,IAAID,IAAI,CAACsF,OAAO,EAAEE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;MAC1D/E,aAAa,CAACS,OAAO,GAAG,CAAC,GAAGT,aAAa,CAACS,OAAO,EAAE+D,EAAE,CAAC;IACxD,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXQ,aAAa,CAACL,UAAU,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE/E,OAAA;IAAAqF,QAAA,gBACErF,OAAA;MAAQsF,GAAG,EAAEnF,SAAU;MAACoF,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAkB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACvE5F,OAAA,CAACF,UAAU;MAACM,aAAa,EAAEA,aAAc;MAACC,aAAa,EAAEA;IAAc;MAAAoF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvE,CAAC;AAEV,CAAC;AAAC1F,EAAA,CA/JID,GAAG;AAAA4F,EAAA,GAAH5F,GAAG;AAiKT,eAAeA,GAAG;AAAC,IAAA4F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}