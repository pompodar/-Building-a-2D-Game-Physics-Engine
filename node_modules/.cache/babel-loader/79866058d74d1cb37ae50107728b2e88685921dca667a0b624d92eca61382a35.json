{"ast":null,"code":"import Vec2 from './Vec2';\nclass RigidShape {\n  constructor(center, mass = 1, friction = 0.8, restitution = 0.2) {\n    this.mCenter = center;\n    const width = 40;\n    const height = 40;\n    this.width = 40;\n    this.height = 40;\n    this.mAngle = 0;\n    this.mFix = 0;\n    this.mVelocity = new Vec2(0, 0);\n    this.mAcceleration = new Vec2(0, 10); // Gravity\n    this.mAngle = 0; // Angle of rotation\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n    this.mVertex = [];\n    this.mFaceNormal = [];\n\n    // 0--TopLeft; 1--TopRight; 2--BottomRight; 3--BottomLeft\n    this.mVertex[0] = new Vec2(center.x - width / 2, center.y - height / 2);\n    this.mVertex[1] = new Vec2(center.x + width / 2, center.y - height / 2);\n    this.mVertex[2] = new Vec2(center.x + width / 2, center.y + height / 2);\n    this.mVertex[3] = new Vec2(center.x - width / 2, center.y + height / 2);\n\n    // 0--Top; 1--Right; 2--Bottom; 3--Left\n    // mFaceNormal is the normal of the face towards the outside of the rectangle\n    this.mFaceNormal[0] = this.mVertex[1].subtract(this.mVertex[2]).normalize();\n    this.mFaceNormal[1] = this.mVertex[2].subtract(this.mVertex[3]).normalize();\n    this.mFaceNormal[2] = this.mVertex[3].subtract(this.mVertex[0]).normalize();\n    this.mFaceNormal[3] = this.mVertex[0].subtract(this.mVertex[1]).normalize();\n    this.mCenter = center;\n    this.mInertia = 0;\n    this.mInvMass = mass !== undefined ? mass : 1;\n    this.mFriction = friction !== undefined ? friction : 0.8;\n    this.mRestitution = restitution !== undefined ? restitution : 0.2;\n    this.mVelocity = new Vec2(0, 0);\n    if (this.mInvMass !== 0) {\n      this.mInvMass = 1 / this.mInvMass;\n      this.mAcceleration = new Vec2(0, 10);\n    } else {\n      this.mAcceleration = new Vec2(0, 0);\n    }\n    this.mAngle = 0;\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n    this.mBoundRadius = 0;\n    this.updateInertia();\n  }\n  update() {\n    console.log(\"update\");\n    if (true) {\n      const dt = 200;\n      this.mVelocity = this.mVelocity.add(this.mAcceleration.scale(dt));\n      this.move(this.mVelocity.scale(dt));\n      this.mAngularVelocity += this.mAngularAcceleration * dt;\n      this.rotate(this.mAngularVelocity * dt);\n    }\n  }\n  move(vec) {\n    console.log(\"move\");\n    this.mCenter = this.mCenter.add(vec);\n  }\n  rotate(angle) {\n    this.mAngle += angle;\n  }\n  boundTest(otherShape) {\n    const vFrom1to2 = otherShape.mCenter.subtract(this.mCenter);\n    const rSum = this.mBoundRadius + otherShape.mBoundRadius;\n    const dist = vFrom1to2.length();\n    return dist <= rSum;\n  }\n  updateMass(delta) {\n    let mass = this.mInvMass !== 0 ? 1 / this.mInvMass : 0;\n    mass += delta;\n    if (mass <= 0) {\n      this.mInvMass = 0;\n      this.mVelocity = new Vec2(0, 0);\n      this.mAcceleration = new Vec2(0, 0);\n      this.mAngularVelocity = 0;\n      this.mAngularAcceleration = 0;\n    } else {\n      this.mInvMass = 1 / mass;\n      this.mAcceleration = new Vec2(0, 10);\n    }\n    this.updateInertia();\n  }\n  updateInertia() {\n    if (this.mInvMass === 0) {\n      this.mInertia = 0;\n    } else {\n      this.mInertia = 1 / this.mInvMass * (this.width ** 2 + this.height ** 2) / 12;\n      this.mInertia = 1 / this.mInertia;\n    }\n  }\n}\nexport default RigidShape;","map":{"version":3,"names":["Vec2","RigidShape","constructor","center","mass","friction","restitution","mCenter","width","height","mAngle","mFix","mVelocity","mAcceleration","mAngularVelocity","mAngularAcceleration","mVertex","mFaceNormal","x","y","subtract","normalize","mInertia","mInvMass","undefined","mFriction","mRestitution","mBoundRadius","updateInertia","update","console","log","dt","add","scale","move","rotate","vec","angle","boundTest","otherShape","vFrom1to2","rSum","dist","length","updateMass","delta"],"sources":["/Users/mac/Desktop/apps/physics/physics_engine/React/src/RigidShape.js"],"sourcesContent":["import Vec2 from './Vec2';\n\nclass RigidShape {\n  constructor(center, mass = 1, friction = 0.8, restitution = 0.2) {\n    this.mCenter = center;\n    const width = 40;\n    const height = 40;\n    this.width = 40;\n    this.height = 40;\n    this.mAngle = 0;\n    this.mFix = 0;\n\n    this.mVelocity = new Vec2(0, 0);\n    this.mAcceleration = new Vec2(0, 10); // Gravity\n    this.mAngle = 0; // Angle of rotation\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n\n    this.mVertex = [];\n    this.mFaceNormal = [];\n\n    // 0--TopLeft; 1--TopRight; 2--BottomRight; 3--BottomLeft\n    this.mVertex[0] = new Vec2(center.x - width / 2, center.y - height / 2);\n    this.mVertex[1] = new Vec2(center.x + width / 2, center.y - height / 2);\n    this.mVertex[2] = new Vec2(center.x + width / 2, center.y + height / 2);\n    this.mVertex[3] = new Vec2(center.x - width / 2, center.y + height / 2);\n\n    // 0--Top; 1--Right; 2--Bottom; 3--Left\n    // mFaceNormal is the normal of the face towards the outside of the rectangle\n    this.mFaceNormal[0] = this.mVertex[1].subtract(this.mVertex[2]).normalize();\n    this.mFaceNormal[1] = this.mVertex[2].subtract(this.mVertex[3]).normalize();\n    this.mFaceNormal[2] = this.mVertex[3].subtract(this.mVertex[0]).normalize();\n    this.mFaceNormal[3] = this.mVertex[0].subtract(this.mVertex[1]).normalize();\n\n    this.mCenter = center;\n    this.mInertia = 0;\n\n    this.mInvMass = mass !== undefined ? mass : 1;\n    this.mFriction = friction !== undefined ? friction : 0.8;\n    this.mRestitution = restitution !== undefined ? restitution : 0.2;\n\n    this.mVelocity = new Vec2(0, 0);\n    if (this.mInvMass !== 0) {\n      this.mInvMass = 1 / this.mInvMass;\n      this.mAcceleration = new Vec2(0, 10);      \n    } else {\n      this.mAcceleration = new Vec2(0, 0);\n    }\n\n    this.mAngle = 0;\n    this.mAngularVelocity = 0;\n    this.mAngularAcceleration = 0;\n    this.mBoundRadius = 0;\n\n    this.updateInertia();\n  }\n\n  update() {\n    console.log(\"update\");\n    \n    if (true) {\n      const dt = 200;\n      this.mVelocity = this.mVelocity.add(this.mAcceleration.scale(dt));\n      this.move(this.mVelocity.scale(dt));\n      this.mAngularVelocity += this.mAngularAcceleration * dt;\n      this.rotate(this.mAngularVelocity * dt);\n    }\n  }\n\n  move(vec) {\n    console.log(\"move\");\n    \n    this.mCenter = this.mCenter.add(vec);\n  }\n\n  rotate(angle) {\n    this.mAngle += angle;\n  }\n\n  boundTest(otherShape) {\n    const vFrom1to2 = otherShape.mCenter.subtract(this.mCenter);\n    const rSum = this.mBoundRadius + otherShape.mBoundRadius;\n    const dist = vFrom1to2.length();\n\n    return dist <= rSum;\n  }\n\n  updateMass(delta) {\n    let mass = this.mInvMass !== 0 ? 1 / this.mInvMass : 0;\n    mass += delta;\n\n    if (mass <= 0) {\n      this.mInvMass = 0;\n      this.mVelocity = new Vec2(0, 0);\n      this.mAcceleration = new Vec2(0, 0);\n      this.mAngularVelocity = 0;\n      this.mAngularAcceleration = 0;\n    } else {\n      this.mInvMass = 1 / mass;\n      this.mAcceleration = new Vec2(0, 10);\n    }\n\n    this.updateInertia();\n  }\n\n  updateInertia() {    \n    if (this.mInvMass === 0) {\n      this.mInertia = 0;\n    } else {\n      this.mInertia = (1 / this.mInvMass) * (this.width ** 2 + this.height ** 2) / 12;\n      this.mInertia = 1 / this.mInertia;\n    }\n  }\n}\n\nexport default RigidShape;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAACC,MAAM,EAAEC,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAG,GAAG,EAAEC,WAAW,GAAG,GAAG,EAAE;IAC/D,IAAI,CAACC,OAAO,GAAGJ,MAAM;IACrB,MAAMK,KAAK,GAAG,EAAE;IAChB,MAAMC,MAAM,GAAG,EAAE;IACjB,IAAI,CAACD,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,IAAI,GAAG,CAAC;IAEb,IAAI,CAACC,SAAS,GAAG,IAAIZ,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI,CAACa,aAAa,GAAG,IAAIb,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACtC,IAAI,CAACU,MAAM,GAAG,CAAC,CAAC,CAAC;IACjB,IAAI,CAACI,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,oBAAoB,GAAG,CAAC;IAE7B,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,WAAW,GAAG,EAAE;;IAErB;IACA,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACG,MAAM,CAACe,CAAC,GAAGV,KAAK,GAAG,CAAC,EAAEL,MAAM,CAACgB,CAAC,GAAGV,MAAM,GAAG,CAAC,CAAC;IACvE,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACG,MAAM,CAACe,CAAC,GAAGV,KAAK,GAAG,CAAC,EAAEL,MAAM,CAACgB,CAAC,GAAGV,MAAM,GAAG,CAAC,CAAC;IACvE,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACG,MAAM,CAACe,CAAC,GAAGV,KAAK,GAAG,CAAC,EAAEL,MAAM,CAACgB,CAAC,GAAGV,MAAM,GAAG,CAAC,CAAC;IACvE,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACG,MAAM,CAACe,CAAC,GAAGV,KAAK,GAAG,CAAC,EAAEL,MAAM,CAACgB,CAAC,GAAGV,MAAM,GAAG,CAAC,CAAC;;IAEvE;IACA;IACA,IAAI,CAACQ,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAAC,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAACK,SAAS,CAAC,CAAC;IAC3E,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAAC,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAACK,SAAS,CAAC,CAAC;IAC3E,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAAC,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAACK,SAAS,CAAC,CAAC;IAC3E,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAAC,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAACK,SAAS,CAAC,CAAC;IAE3E,IAAI,CAACd,OAAO,GAAGJ,MAAM;IACrB,IAAI,CAACmB,QAAQ,GAAG,CAAC;IAEjB,IAAI,CAACC,QAAQ,GAAGnB,IAAI,KAAKoB,SAAS,GAAGpB,IAAI,GAAG,CAAC;IAC7C,IAAI,CAACqB,SAAS,GAAGpB,QAAQ,KAAKmB,SAAS,GAAGnB,QAAQ,GAAG,GAAG;IACxD,IAAI,CAACqB,YAAY,GAAGpB,WAAW,KAAKkB,SAAS,GAAGlB,WAAW,GAAG,GAAG;IAEjE,IAAI,CAACM,SAAS,GAAG,IAAIZ,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI,IAAI,CAACuB,QAAQ,KAAK,CAAC,EAAE;MACvB,IAAI,CAACA,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACA,QAAQ;MACjC,IAAI,CAACV,aAAa,GAAG,IAAIb,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;IACtC,CAAC,MAAM;MACL,IAAI,CAACa,aAAa,GAAG,IAAIb,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IACrC;IAEA,IAAI,CAACU,MAAM,GAAG,CAAC;IACf,IAAI,CAACI,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,oBAAoB,GAAG,CAAC;IAC7B,IAAI,CAACY,YAAY,GAAG,CAAC;IAErB,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB;EAEAC,MAAMA,CAAA,EAAG;IACPC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IAErB,IAAI,IAAI,EAAE;MACR,MAAMC,EAAE,GAAG,GAAG;MACd,IAAI,CAACpB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACqB,GAAG,CAAC,IAAI,CAACpB,aAAa,CAACqB,KAAK,CAACF,EAAE,CAAC,CAAC;MACjE,IAAI,CAACG,IAAI,CAAC,IAAI,CAACvB,SAAS,CAACsB,KAAK,CAACF,EAAE,CAAC,CAAC;MACnC,IAAI,CAAClB,gBAAgB,IAAI,IAAI,CAACC,oBAAoB,GAAGiB,EAAE;MACvD,IAAI,CAACI,MAAM,CAAC,IAAI,CAACtB,gBAAgB,GAAGkB,EAAE,CAAC;IACzC;EACF;EAEAG,IAAIA,CAACE,GAAG,EAAE;IACRP,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IAEnB,IAAI,CAACxB,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC0B,GAAG,CAACI,GAAG,CAAC;EACtC;EAEAD,MAAMA,CAACE,KAAK,EAAE;IACZ,IAAI,CAAC5B,MAAM,IAAI4B,KAAK;EACtB;EAEAC,SAASA,CAACC,UAAU,EAAE;IACpB,MAAMC,SAAS,GAAGD,UAAU,CAACjC,OAAO,CAACa,QAAQ,CAAC,IAAI,CAACb,OAAO,CAAC;IAC3D,MAAMmC,IAAI,GAAG,IAAI,CAACf,YAAY,GAAGa,UAAU,CAACb,YAAY;IACxD,MAAMgB,IAAI,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC;IAE/B,OAAOD,IAAI,IAAID,IAAI;EACrB;EAEAG,UAAUA,CAACC,KAAK,EAAE;IAChB,IAAI1C,IAAI,GAAG,IAAI,CAACmB,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,QAAQ,GAAG,CAAC;IACtDnB,IAAI,IAAI0C,KAAK;IAEb,IAAI1C,IAAI,IAAI,CAAC,EAAE;MACb,IAAI,CAACmB,QAAQ,GAAG,CAAC;MACjB,IAAI,CAACX,SAAS,GAAG,IAAIZ,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MAC/B,IAAI,CAACa,aAAa,GAAG,IAAIb,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MACnC,IAAI,CAACc,gBAAgB,GAAG,CAAC;MACzB,IAAI,CAACC,oBAAoB,GAAG,CAAC;IAC/B,CAAC,MAAM;MACL,IAAI,CAACQ,QAAQ,GAAG,CAAC,GAAGnB,IAAI;MACxB,IAAI,CAACS,aAAa,GAAG,IAAIb,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;IACtC;IAEA,IAAI,CAAC4B,aAAa,CAAC,CAAC;EACtB;EAEAA,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAACL,QAAQ,KAAK,CAAC,EAAE;MACvB,IAAI,CAACD,QAAQ,GAAG,CAAC;IACnB,CAAC,MAAM;MACL,IAAI,CAACA,QAAQ,GAAI,CAAC,GAAG,IAAI,CAACC,QAAQ,IAAK,IAAI,CAACf,KAAK,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE;MAC/E,IAAI,CAACa,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACA,QAAQ;IACnC;EACF;AACF;AAEA,eAAerB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}